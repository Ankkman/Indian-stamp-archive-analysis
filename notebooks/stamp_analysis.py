# -*- coding: utf-8 -*-
"""stamp_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jAvD6e7jlcFDqhQl_4e1VSzQWfQ_7-c4

# ðŸ“¬ Indian Postage Stamp Archive â€“ Exploratory Data Analysis

## ðŸ“Œ Project Overview
This project analyzes a custom dataset of ~3000 official Indian postage stamps issued between 1962 and 2025.  
The dataset contains information such as **title, denomination, category, date of issue, and image links**.

The goal is to:
- Explore historical trends in Indian stamp issuance.
- Analyze patterns by **year, decade, category, and denomination**.
- Provide visual insights for historical and philatelic research.

## ðŸ“‚ Dataset Description
**Columns:**
- `title` â€“ Name of the stamp.
- `denomination` â€“ Original denomination value (nP / Rs).
- `category` â€“ Stamp category (available for stamps up to year 2000).
- `date_of_issue` â€“ Official release date.
- `Image` â€“ Link to the stamp image.

**Dataset Size:** 2946 rows Ã— 7 columns  
**Time Range:** 1962â€“2025
"""

# Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re

# Visual settings
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (12,6)

# Load dataset
url = 'https://raw.githubusercontent.com/Ankkman/Indian-stamp-archive-analysis/refs/heads/main/data/stamps.csv'
df = pd.read_csv(url)

print("Dataset shape:", df.shape)
df.head(5)

# STEP 1: DATE & YEAR CLEANING


# Ensure 'date_of_issue' is treated as a string
df['date_of_issue'] = df['date_of_issue'].astype(str).replace('nan', np.nan)

# Parse with pandas datetime
df['date_parsed'] = pd.to_datetime(df['date_of_issue'], errors='coerce', dayfirst=True)

# Fallback year extraction from text
import re
def extract_year_from_text(x):
    if pd.isna(x):
        return np.nan
    m = re.search(r'(19|20)\d{2}', str(x))
    return int(m.group(0)) if m else np.nan

# Fill missing year values
df['year'] = df['date_parsed'].dt.year
df['year'] = df['year'].fillna(df['date_of_issue'].apply(extract_year_from_text)).astype('Int64')

# Create decade column
df['decade'] = (df['year'] // 10) * 10

print("âœ… Years extracted for", df['year'].notna().sum(), "out of", len(df), "rows.")
df[['date_of_issue', 'date_parsed', 'year', 'decade']].head()

# STEP 2: DENOMINATION CLEANING


def clean_denomination(value):
    if pd.isna(value):
        return np.nan
    num = re.findall(r"[\d\.]+", str(value))
    return float(num[0]) if num else np.nan

df['denomination_clean'] = df['denomination'].apply(clean_denomination)

print("Unique denominations (raw):", df['denomination'].nunique())
print("Unique denominations (clean numeric):", df['denomination_clean'].nunique())
df[['denomination', 'denomination_clean']].head(10)

# STEP 3: MISSING VALUES SUMMARY
missing = df.isnull().sum().sort_values(ascending=False)
print(missing)

# STEP 4: SAVE CLEANED VERSION

df.to_csv('cleaned_stamps_step1.csv', index=False)
print("ðŸ’¾ Saved: cleaned_stamps_step1.csv")

"""## Number of Stamps Issued per Year"""

# Chart 1: Stamps per year

plt.figure(figsize=(14,6))
year_counts = df['year'].value_counts().sort_index()
sns.lineplot(x=year_counts.index, y=year_counts.values, marker='o')
plt.title('Number of Stamps Issued per Year', fontsize=16)
plt.xlabel('Year')
plt.ylabel('Number of Stamps')
plt.grid(True)
plt.show()

"""**Insights:**
- Early years (1960s) saw relatively low stamp issuance.
- Gradual increase over decades, with spikes during special events.
- Largest spike observed in **2017** (over 200 stamps).

## Number of Stamps Issued per Decade
"""

# Chart 2: Stamps per decade

plt.figure(figsize=(10,5))
decade_counts = df['decade'].value_counts().sort_index()
sns.barplot(x=decade_counts.index.astype(str), y=decade_counts.values, palette='viridis')
plt.title('Number of Stamps Issued per Decade', fontsize=16)
plt.xlabel('Decade')
plt.ylabel('Number of Stamps')
plt.show()

"""**Insights:**
- Steady growth from 1960s through 2000s.
- 2010s saw the highest issuance, driven by commemorative series.

## Stamp Categories (Up to Year 2000)
"""

#Category Distribution

# Filter only stamps with category and year <= 2000
df_cat = df[(df['year'].notna()) & (df['year'] <= 2000) & (df['category'].notna())]

# Count by category
cat_counts = df_cat['category'].value_counts().sort_values(ascending=True)

# Plot
plt.figure(figsize=(10,6))
cat_counts.plot(kind='barh', color='skyblue')
plt.title('Stamp Categories (Up to Year 2000)', fontsize=16)
plt.xlabel('Number of Stamps')
plt.ylabel('Category')
plt.show()

"""**Insights:**
- `Event` and `Personality` categories dominate.
- Certain categories are decade-specific, reflecting historical themes.

# Category vs Decade Heatmap
"""

# Category vs Decade Heatmap

# Create crosstab for category vs decade
cat_decade_ct = pd.crosstab(df_cat['decade'], df_cat['category'])

# Heatmap
plt.figure(figsize=(12,6))
sns.heatmap(cat_decade_ct, cmap="YlGnBu", annot=True, fmt='d')
plt.title('Number of Stamps by Category and Decade (<=2000)', fontsize=16)
plt.xlabel('Category')
plt.ylabel('Decade')
plt.show()

"""## Denomination Analysis"""

# Denomination Analysis

# Filter only rows with valid numeric denomination
df_denom = df[df['denomination_clean'].notna()]

# Histogram of denominations
plt.figure(figsize=(10,5))
sns.histplot(df_denom['denomination_clean'], bins=30, kde=False, color='coral')
plt.title('Distribution of Stamp Denominations', fontsize=16)
plt.xlabel('Denomination Value')
plt.ylabel('Number of Stamps')
plt.show()

# Top 10 most common denominations
top_denoms = df_denom['denomination_clean'].value_counts().head(10)

plt.figure(figsize=(8,5))
sns.barplot(x=top_denoms.index, y=top_denoms.values, palette='muted')
plt.title('Top 10 Most Common Stamp Denominations', fontsize=16)
plt.xlabel('Denomination Value')
plt.ylabel('Number of Stamps')
plt.show()

"""**Insights:**
- Most denominations fall under low values (â‰¤ 5 Rs), suited for postal needs.
- 15 nP was common in earlier decades.

## Top Issuing Years
"""

# Top Issuing Years

# Count stamps per year
top_years = df['year'].value_counts().head(10).sort_index()

# Bar chart
plt.figure(figsize=(10,5))
sns.barplot(x=top_years.index, y=top_years.values, palette='viridis')
plt.title('Top 10 Years with Most Stamp Issues', fontsize=16)
plt.xlabel('Year')
plt.ylabel('Number of Stamps')
plt.show()

print("Top 10 Years with Most Stamp Issues:")
print(top_years)

"""**Peak Year:** 2017 with over 200 stamps issued.  
Likely due to large commemorative series and special events.

## ðŸŽ¯ Key Learnings
- Indiaâ€™s stamp issuance has grown significantly since the 1960s.
- Historical events and anniversaries strongly influence issuance spikes.
- Categories and denominations offer insight into postal and economic history.
"""